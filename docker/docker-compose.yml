version: '3.8'

services:
  # Main Nginx RTMP Server
  nginx:
    build: .
    container_name: livestream-nginx
    ports:
      - "8080:80"
      - "1935:1935"
    volumes:
      - ./hls:/hls
      - ./logs:/var/log/nginx
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - livestream

  # Backend API
  backend:
    build: ./backend
    container_name: livestream-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://livestream:password@postgres:5432/livestream
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=livestream-secret-key
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - livestream

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: livestream-postgres
    environment:
      - POSTGRES_DB=livestream
      - POSTGRES_USER=livestream
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - livestream

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: livestream-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - livestream

  # WebSocket Server
  websocket:
    build: ./websocket
    container_name: livestream-websocket
    ports:
      - "3001:3001"
    environment:
      - REDIS_URL=redis://redis:6379
      - BACKEND_URL=http://backend:3000
    depends_on:
      - redis
      - backend
    restart: unless-stopped
    networks:
      - livestream

volumes:
  postgres_data:
  redis_data:

networks:
  livestream:
    driver: bridge
