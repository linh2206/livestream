version: '3.8'

services:
  # Nginx RTMP Server
  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: livestream-app_nginx
    ports:
      - "8080:8080"    # HTTP
      - "1935:1935"    # RTMP
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./hls:/var/www/hls
      - ../web:/var/www/html:ro
    depends_on:
      - backend
    networks:
      - livestream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: livestream-app_backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://livestream:livestream@postgres:5432/livestream
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - livestream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server
  websocket:
    build:
      context: ../websocket
      dockerfile: Dockerfile
    container_name: livestream-app_websocket
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - livestream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: livestream-app_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=livestream
      - POSTGRES_USER=livestream
      - POSTGRES_PASSWORD=livestream
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - livestream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U livestream -d livestream"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: livestream-app_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - livestream-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  livestream-network:
    driver: bridge
