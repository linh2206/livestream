name: CD

on:
    workflow_run:
        workflows: ["CI"]
        types: [completed]
        branches: [main]

env:
    NODE_VERSION: "20"

jobs:
    deploy:
        name: Deploy to server
        runs-on: ubuntu-latest
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup SSH
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add known hosts
              run: |
                  ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

            - name: Create deploy bundle (exclude dev files)
              run: |
                  tar --exclude-vcs --exclude='.github' --exclude='node_modules' -czf release.tgz .

            - name: Upload bundle to server
              run: |
                  scp -P ${{ secrets.SSH_PORT }} release.tgz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/livestream-release.tgz

            - name: Deploy on server
              env:
                  APP_DIR: ${{ secrets.APP_DIR }}
              run: |
                  ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
                    set -euo pipefail; \
                    mkdir -p \"$APP_DIR\"; \
                    tar -xzf /tmp/livestream-release.tgz -C \"$APP_DIR\"; \
                    rm -f /tmp/livestream-release.tgz; \
                    cd \"$APP_DIR\"; \
                    echo 'Writing .env from secrets'; \
                    cat > .env << 'EOF'\n${{ secrets.ENV_FILE }}\nEOF\n; \
                    docker compose pull || true; \
                    docker compose build --no-cache; \
                    docker compose up -d --remove-orphans; \
                    docker image prune -f || true; \
                    docker system df; \
                  "

            - name: Health check Backend
              run: |
                  for i in {1..15}; do \
                    if curl -fsS ${{ secrets.BACKEND_HEALTH_URL }} >/dev/null; then echo "Backend OK"; exit 0; fi; \
                    sleep 10; \
                  done; \
                  echo "Backend health check failed"; exit 1

            - name: Health check Frontend
              run: |
                  for i in {1..15}; do \
                    if curl -fsS ${{ secrets.FRONTEND_HEALTH_URL }} >/dev/null; then echo "Frontend OK"; exit 0; fi; \
                    sleep 10; \
                  done; \
                  echo "Frontend health check failed"; exit 1
