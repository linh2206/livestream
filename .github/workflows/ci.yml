name: 🎬 LiveStream App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔒 Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build Docker images
      run: |
        cd docker
        docker-compose build --parallel
        
    - name: 🔍 Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 🧹 Lint shell scripts
      run: |
        if command -v shellcheck >/dev/null 2>&1; then
          find . -name "*.sh" -exec shellcheck {} \;
        else
          echo "⚠️ ShellCheck not available, skipping shell script linting"
        fi
        
    - name: 🧹 Lint Docker files
      run: |
        if command -v hadolint >/dev/null 2>&1; then
          find . -name "Dockerfile" -exec hadolint {} \;
        else
          echo "⚠️ Hadolint not available, skipping Docker linting"
        fi

  # 🧪 Testing
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: livestream_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build and start services
      run: |
        cd docker
        docker-compose up -d --build
        
    - name: ⏳ Wait for services to be ready
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        # Check if web interface is accessible
        for i in {1..10}; do
          if curl -f http://localhost:8080/health 2>/dev/null; then
            echo "✅ Web interface is ready"
            break
          fi
          echo "⏳ Attempt $i/10: Waiting for web interface..."
          sleep 10
        done
        
    - name: 🧪 Test web interface
      run: |
        # Test main page
        curl -f http://localhost:8080/ || exit 1
        echo "✅ Main page accessible"
        
        # Test HLS endpoint (may not exist for new streams)
        if curl -f http://localhost:8080/hls/stream.m3u8 2>/dev/null; then
          echo "✅ HLS endpoint accessible"
        else
          echo "ℹ️ HLS endpoint not ready (expected for new streams)"
        fi
        
    - name: 📊 Check service logs
      if: always()
      run: |
        cd docker
        echo "📊 Service Status:"
        docker-compose ps
        
        echo "📋 Recent Logs:"
        docker-compose logs --tail=20
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        cd docker
        docker-compose down -v

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, etc.

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./docker
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl, docker-compose, etc.
        
    - name: 📢 Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🎬 LiveStream App Release v${{ github.run_number }}
          
          ## 🚀 What's New
          - Automated deployment from main branch
          - Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
          
          ## 📋 Changes
          See commit history for detailed changes.
          
          ## 🐳 Docker Usage
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker run -p 8080:8080 -p 1935:1935 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
        draft: false
        prerelease: false
