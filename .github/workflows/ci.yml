name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"

jobs:
  # Lint, Type Check, và Build - chạy song song
  test:
    name: Test ${{ matrix.app }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [frontend, backend]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: apps/${{ matrix.app }}
        run: npm ci

      - name: Lint
        working-directory: apps/${{ matrix.app }}
        run: npm run lint || true
        continue-on-error: true

      - name: Type check
        working-directory: apps/${{ matrix.app }}
        run: npm run type-check

      - name: Build
        working-directory: apps/${{ matrix.app }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: apps/${{ matrix.app }}/.next
          retention-days: 1
        if: matrix.app == 'frontend'

  # Security scan
  security:
    name: Security scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace aquasec/trivy:latest fs /workspace --severity HIGH,CRITICAL || true
        continue-on-error: true

  # Docker build test - chỉ chạy khi push
  docker:
    name: Docker build test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker images
        run: docker-compose build
        env:
          DOCKER_BUILDKIT: 1
          COMPOSE_DOCKER_CLI_BUILD: 1

      - name: Test containers
        run: |
          docker-compose up -d
          sleep 30
          docker-compose ps
          docker-compose logs --tail=50
          docker-compose down -v

  # Summary job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()

    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [ "${{ needs.docker.result }}" != "success" ] && [ "${{ needs.docker.result }}" != "skipped" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
