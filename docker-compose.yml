services:
  # MongoDB Database
  mongodb:
    image: mongo:4.4
    container_name: livestream-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./config/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
    command: mongod --wiredTigerCacheSizeGB 1 --maxConns 1000 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - livestream-network

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    container_name: livestream-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - livestream-network

  # Backend API
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
      target: production
    container_name: livestream-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-9000}:9000"
    volumes:
      - hls_data:/app/hls
      - recordings_data:/app/recordings
      - vod_data:/app/vod
    environment:
      - NODE_ENV=production
      - PORT=${PORT:-9000}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/livestream}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7days}
      - API_BASE_URL=${API_BASE_URL}
      - FRONTEND_URL=${FRONTEND_URL}
      - HLS_BASE_URL=${HLS_BASE_URL}
      - HLS_FRAGMENT_DURATION=${HLS_FRAGMENT_DURATION:-2}
      - HLS_PLAYLIST_LENGTH=${HLS_PLAYLIST_LENGTH:-6}
      - HLS_CLEANUP_INTERVAL=${HLS_CLEANUP_INTERVAL:-300}
      - RTMP_BASE_URL=${RTMP_BASE_URL}
      - WS_BASE_URL=${WS_BASE_URL}
      - NGINX_URL=${NGINX_URL}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      hls-manager:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - livestream-network

  # Frontend
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      target: production
    container_name: livestream-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${API_BASE_URL}
      - NEXT_PUBLIC_HLS_BASE_URL=${HLS_BASE_URL}
      - NEXT_PUBLIC_WS_URL=${WS_BASE_URL}
      - NEXT_PUBLIC_RTMP_URL=${RTMP_BASE_URL}
      - NEXT_PUBLIC_CACHE_TTL=${NEXT_PUBLIC_CACHE_TTL:-300}
      - NEXT_PUBLIC_MAX_RETRIES=${NEXT_PUBLIC_MAX_RETRIES:-3}
      - NEXT_PUBLIC_RETRY_DELAY=${NEXT_PUBLIC_RETRY_DELAY:-1000}
      - NEXT_PUBLIC_ENABLE_DEBUG=${NEXT_PUBLIC_ENABLE_DEBUG:-false}
      - NEXT_PUBLIC_ENABLE_ANALYTICS=${NEXT_PUBLIC_ENABLE_ANALYTICS:-false}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - livestream-network

  # HLS Manager Service
  hls-manager:
    image: alpine:latest
    container_name: livestream-hls-manager
    restart: unless-stopped
    volumes:
      - hls_data:/app/hls
    command: |
      sh -c "
        echo 'Starting HLS Manager...' &&
        mkdir -p /app/hls &&
        chmod -R 777 /app/hls &&
        echo 'HLS directory ready' &&
        while true; do
          # Only clean up files older than 30 minutes (not 10 minutes)
          find /app/hls -name '*.ts' -mmin +30 -delete 2>/dev/null || true
          find /app/hls -name '*.m3u8' -mmin +30 -delete 2>/dev/null || true
          # Clean up empty directories
          find /app/hls -type d -empty -delete 2>/dev/null || true
          sleep 300
        done
      "
    healthcheck:
      test:
        ["CMD", "sh", "-c", "test -d /app/hls && echo 'HLS directory exists'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - livestream-network

  # Nginx RTMP
  nginx:
    build:
      context: ./config/nginx
      dockerfile: Dockerfile.nginx
    container_name: livestream-nginx
    restart: unless-stopped
    ports:
      - "${RTMP_PORT:-1935}:1935"
      - "${NGINX_HTTP_PORT:-8080}:8080"
    volumes:
      - hls_data:/app/hls
      - recordings_data:/app/recordings
    environment:
      - BACKEND_PORT=9000
      - RTMP_PORT=${RTMP_PORT:-1935}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      hls-manager:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - livestream-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: livestream-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --storage.tsdb.retention.time=200h
      - --web.enable-lifecycle
    networks:
      - livestream-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: livestream-grafana
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SERVER_HTTP_PORT=8001
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - livestream-network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: livestream-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.rootfs=/rootfs
      - --path.sysfs=/host/sys
      - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    networks:
      - livestream-network

  # MongoDB Exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    container_name: livestream-mongodb-exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://admin:admin123@mongodb:27017/livestream?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - livestream-network

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: livestream-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - livestream-network

volumes:
  mongodb_data:
  redis_data:
  hls_data:
  recordings_data:
  vod_data:
  prometheus_data:
  grafana_data:

networks:
  livestream-network:
