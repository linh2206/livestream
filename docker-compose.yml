# LiveStream App - Docker Compose v2
# Frontend: Port 3000, Backend: Port 9000

version: '3.8'

services:
  mongodb:
    image: mongo:4.4
    container_name: livestream-mongodb
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    command: mongod --bind_ip_all --wiredTigerCacheSizeGB 0.5
    volumes:
      - mongodb_data:/data/db
      - ./config/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    ports:
      - "27017:27017"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: livestream-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: livestream-api
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 9000
      MONGODB_URI: mongodb://mongodb:27017/livestream?family=4
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      API_URL: ${API_URL}
      WS_URL: ${WS_URL}
      HLS_URL: ${HLS_URL}
      RTMP_URL: ${RTMP_URL}
      BACKEND_URL: ${BACKEND_URL}
    ports:
      - "9000:9000"  # Expose for WebSocket connection
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9000/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: livestream-frontend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3000
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      NEXT_PUBLIC_HLS_URL: ${NEXT_PUBLIC_HLS_URL}
      NEXT_PUBLIC_STREAM_NAME: ${NEXT_PUBLIC_STREAM_NAME}
      NEXT_PUBLIC_RTMP_URL: ${NEXT_PUBLIC_RTMP_URL}
      BACKEND_URL: ${BACKEND_URL}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  nginx:
    build:
      context: ./config/nginx
      dockerfile: Dockerfile
    container_name: livestream-nginx
    environment:
      BACKEND_URL: ${BACKEND_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      API_URL: ${API_URL}
      WS_URL: ${WS_URL}
      HLS_URL: ${HLS_URL}
      RTMP_URL: ${RTMP_URL}
    ports:
      - "8080:8080"
      - "1935:1935"
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/stat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named volumes for better data management
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  hls_data:
    driver: local

# Network configuration for IPv4 compatibility
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16