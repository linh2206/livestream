# LiveStream App - Docker Compose Configuration
# Production-ready setup with proper networking and health checks

version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:4.4
    container_name: livestream-mongodb
    environment:
      MONGO_INITDB_DATABASE: livestream
    command: mongod --bind_ip_all --wiredTigerCacheSizeGB 0.5
    volumes:
      - mongodb_data:/data/db
      - ./config/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - livestream-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: livestream-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - livestream-network

  # NestJS API Backend
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: livestream-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 9000
      MONGODB_URI: mongodb://mongodb:27017/livestream?family=4
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://frontend:3000}
      API_URL: ${API_URL:-http://api:9000}
      WS_URL: ${WS_URL:-http://api:9000}
      HLS_URL: ${HLS_URL:-http://localhost:8080/hls}
      RTMP_URL: ${RTMP_URL:-rtmp://localhost:1935/live}
      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-your-google-client-id}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-your-google-client-secret}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-http://183.182.104.226:24190/auth/google/callback}
    ports:
      - "9000:9000"
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:9000/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    networks:
      - livestream-network

  # Next.js Frontend
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: livestream-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      # Public URLs for client-side access
      NEXT_PUBLIC_FRONTEND_URL: ${NEXT_PUBLIC_FRONTEND_URL:-http://localhost:3000}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://183.182.104.226:24190}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://183.182.104.226:24190}
      NEXT_PUBLIC_HLS_URL: ${NEXT_PUBLIC_HLS_URL:-http://localhost:8080/hls}
      NEXT_PUBLIC_STREAM_NAME: ${NEXT_PUBLIC_STREAM_NAME:-stream}
      NEXT_PUBLIC_RTMP_URL: ${NEXT_PUBLIC_RTMP_URL:-rtmp://localhost:1935/live}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - livestream-network

  # Nginx RTMP Server
  nginx:
    build:
      context: ./config/nginx
      dockerfile: Dockerfile
    container_name: livestream-nginx
    environment:
      BACKEND_URL: ${BACKEND_URL:-http://api:9000}
      FRONTEND_URL: ${FRONTEND_URL:-http://frontend:3000}
      API_URL: ${API_URL:-http://api:9000}
      WS_URL: ${WS_URL:-http://api:9000}
      HLS_URL: ${HLS_URL:-http://localhost:8080/hls}
      RTMP_URL: ${RTMP_URL:-rtmp://localhost:1935/live}
    ports:
      - "8080:8080"    # HTTP for HLS
      - "1935:1935"    # RTMP ingest
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/stat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - livestream-network

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  hls_data:
    driver: local

# Custom network for better service communication
networks:
  livestream-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16