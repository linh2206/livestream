# Single Server Deployment - All services on one server
version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: livestream-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: livestream
    volumes:
      - mongodb_data:/data/db
      - ../../infrastructure/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: livestream-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # NestJS API Service
  api:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
    container_name: livestream-api
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://admin:password@mongodb:27017/livestream?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
    ports:
      - "9000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Next.js Frontend Service
  frontend:
    build:
      context: ../../services/frontend
      dockerfile: Dockerfile
    container_name: livestream-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:9000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:9000}
      BACKEND_URL: http://api:3000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped


  # Nginx RTMP + HLS + Reverse Proxy
  nginx:
    build:
      context: ../../infrastructure/nginx
      dockerfile: Dockerfile
    container_name: livestream-nginx
    ports:
      - "8080:8080"    # Web interface
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      - frontend
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  mongodb_data:
  redis_data:
  hls_data:

networks:
  livestream-network:
    driver: bridge
