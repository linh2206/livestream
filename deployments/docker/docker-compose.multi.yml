# Multi-Server Deployment - Services distributed across servers
version: '3.8'

services:
  # Database Server
  mongodb:
    image: mongo:7.0
    container_name: livestream-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: livestream
    volumes:
      - mongodb_data:/data/db
      - ../../infrastructure/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.server == database

  # Cache Server
  redis:
    image: redis:7-alpine
    container_name: livestream-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.server == cache

  # API Server
  api:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
    container_name: livestream-api
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://admin:password@mongodb:27017/livestream?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
      STREAMING_SERVICE_URL: http://streaming:3002
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.labels.server == api
      replicas: 2

  # Frontend Server
  frontend:
    build:
      context: ../../services/frontend
      dockerfile: Dockerfile
    container_name: livestream-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api-server:3000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://streaming-server:3002}
      BACKEND_URL: http://api:3000
      STREAMING_URL: http://streaming:3002
    ports:
      - "3001:3000"
    depends_on:
      - api
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.labels.server == frontend
      replicas: 2

  # Streaming Server
  streaming:
    build:
      context: ../../services/streaming
      dockerfile: Dockerfile
    container_name: livestream-streaming
    environment:
      NODE_ENV: production
      PORT: 3002
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
    ports:
      - "3002:3002"
    depends_on:
      - redis
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.labels.server == streaming
      replicas: 2

  # Load Balancer / Reverse Proxy
  nginx:
    build:
      context: ../../infrastructure/nginx
      dockerfile: Dockerfile
    container_name: livestream-nginx
    ports:
      - "8080:80"      # Web interface
      - "1935:1935"    # RTMP input
      - "8081:8081"    # HLS output
    volumes:
      - hls_data:/var/www/html/hls
    depends_on:
      - frontend
      - streaming
    networks:
      - livestream-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.labels.server == loadbalancer

volumes:
  mongodb_data:
  redis_data:
  hls_data:

networks:
  livestream-network:
    driver: overlay
    attachable: true
