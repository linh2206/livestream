#!/bin/bash

# SSH Server Configuration Script for Ubuntu
# This script configures SSH server with security best practices

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "This script should not be run as root for security reasons"
   exit 1
fi

print_header "SSH Server Configuration for Ubuntu"

# Update system packages
print_status "Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install SSH server if not already installed
print_status "Installing OpenSSH server..."
sudo apt install -y openssh-server

# Backup original SSH config
print_status "Backing up original SSH configuration..."
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup.$(date +%Y%m%d_%H%M%S)

# Configure SSH server
print_status "Configuring SSH server with security best practices..."

# Create new SSH config
sudo tee /etc/ssh/sshd_config > /dev/null << 'EOF'
# SSH Server Configuration
# Generated by setup-ssh-server.sh

# Basic settings
Port 22
Protocol 2
AddressFamily any
ListenAddress 0.0.0.0
ListenAddress ::

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication
LoginGraceTime 2m
PermitRootLogin no
StrictModes yes
MaxAuthTries 3
MaxSessions 10

# Public key authentication
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# Password authentication (disable for better security)
PasswordAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes

# X11 forwarding
X11Forwarding no
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes

# Security settings
ClientAliveInterval 300
ClientAliveCountMax 2
Compression delayed
UseDNS no

# Allow specific users (modify as needed)
# AllowUsers your_username

# Deny specific users
DenyUsers root

# Banner
Banner /etc/ssh/banner

# Subsystem
Subsystem sftp /usr/lib/openssh/sftp-server
EOF

# Create SSH banner
print_status "Creating SSH banner..."
sudo tee /etc/ssh/banner > /dev/null << 'EOF'
***************************************************************************
                    AUTHORIZED ACCESS ONLY
***************************************************************************
This system is for the use of authorized users only. Individuals using
this computer system without authority, or in excess of their authority,
are subject to having all of their activities on this system monitored
and recorded by system personnel.

In the course of monitoring individuals improperly using this system,
or in the course of system maintenance, the activities of authorized
users may also be monitored.

Anyone using this system expressly consents to such monitoring and is
advised that if such monitoring reveals possible evidence of criminal
activity, system personnel may provide the evidence of such monitoring
to law enforcement officials.
***************************************************************************
EOF

# Set proper permissions
sudo chmod 644 /etc/ssh/banner
sudo chmod 600 /etc/ssh/sshd_config

# Create SSH directory for current user if it doesn't exist
print_status "Setting up SSH directory for user: $USER"
mkdir -p ~/.ssh
chmod 700 ~/.ssh

# Generate SSH key pair if it doesn't exist
if [[ ! -f ~/.ssh/id_rsa ]]; then
    print_status "Generating SSH key pair..."
    ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "$USER@$(hostname)"
    print_warning "SSH key pair generated. Add the public key to authorized_keys:"
    echo "cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys"
fi

# Set proper permissions for SSH files
chmod 600 ~/.ssh/id_rsa
chmod 644 ~/.ssh/id_rsa.pub
chmod 600 ~/.ssh/authorized_keys 2>/dev/null || true

# Configure firewall
print_status "Configuring UFW firewall..."
sudo ufw --force enable
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow ssh
sudo ufw allow 22/tcp

# Show firewall status
sudo ufw status

# Test SSH configuration
print_status "Testing SSH configuration..."
sudo sshd -t

if [[ $? -eq 0 ]]; then
    print_status "SSH configuration is valid"
else
    print_error "SSH configuration has errors. Please check the configuration."
    exit 1
fi

# Restart SSH service
print_status "Restarting SSH service..."
sudo systemctl restart ssh
sudo systemctl enable ssh

# Show SSH service status
print_status "SSH service status:"
sudo systemctl status ssh --no-pager

print_header "SSH Server Configuration Complete"

print_status "SSH server has been configured with the following settings:"
echo "  - Port: 22"
echo "  - Root login: Disabled"
echo "  - Password authentication: Disabled"
echo "  - Public key authentication: Enabled"
echo "  - Max authentication tries: 3"
echo "  - Client alive interval: 300 seconds"
echo "  - Banner: Enabled"

print_warning "Important security notes:"
echo "  1. Make sure you have your SSH public key in ~/.ssh/authorized_keys"
echo "  2. Test SSH connection before closing this session"
echo "  3. Consider changing the default SSH port (22) for additional security"
echo "  4. Regularly update your system: sudo apt update && sudo apt upgrade"

print_status "To test SSH connection, run:"
echo "  ssh $USER@$(hostname -I | awk '{print $1}')"

print_status "To add your public key to authorized_keys:"
echo "  cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys"

print_header "Configuration Summary"
echo "SSH server is now running with enhanced security settings."
echo "Make sure to test your SSH connection before logging out!"
