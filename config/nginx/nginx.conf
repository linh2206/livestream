worker_processes auto;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        max_streams 100;
        max_message 1M;
        buflen 1s;

        application live {
            live on;
            record off;
            
            # HLS configuration
            hls on;
            hls_path /app/hls;
            hls_nested on;
            hls_fragment 2s;
            hls_playlist_length 6;
            hls_continuous on;
            hls_cleanup on;
            hls_fragment_naming sequential;
            hls_fragment_slicing aligned;
            hls_base_url /api/v1/hls/;
            
            # Access control
            allow publish all;
            allow play all;
            
            # Callbacks to backend
            on_publish http://backend:9000/api/v1/rtmp/publish;
            on_publish_done http://backend:9000/api/v1/rtmp/publish-done;
            on_play http://backend:9000/api/v1/rtmp/play;
            on_play_done http://backend:9000/api/v1/rtmp/play-done;
        }
    }
}

http {
    # Basic optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # HTTP server for HLS files - Direct serving from nginx
    server {
        listen 8080;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=hls:10m rate=50r/s;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # HLS specific endpoint - must come before general API
        location /api/v1/hls/ {
            limit_req zone=hls burst=20 nodelay;
            
            proxy_pass http://backend:9000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Range, Authorization, Cache-Control, If-Range, If-Modified-Since, If-None-Match, Pragma";
            
            # Enable range requests for video segments
            add_header Accept-Ranges bytes;
            
            # Timeout settings for HLS
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }
        
        # HLS segments with specific headers
        location ~* /api/v1/hls/.*\.ts$ {
            proxy_pass http://backend:9000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Cache-Control "public, max-age=10";
            add_header Content-Type "video/mp2t";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Range, Authorization, Cache-Control, If-Range, If-Modified-Since, If-None-Match, Pragma";
            add_header Accept-Ranges bytes;
        }
        
        # HLS playlists with specific headers
        location ~* /api/v1/hls/.*\.m3u8$ {
            proxy_pass http://backend:9000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header Content-Type "application/vnd.apple.mpegurl";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Range, Authorization, Cache-Control, If-Range, If-Modified-Since, If-None-Match, Pragma";
        }
        
        # Proxy other API requests to backend
        location /api/v1/ {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://backend:9000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Serve frontend static files
        location / {
            proxy_pass http://frontend:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for frontend
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
