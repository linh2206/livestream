worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        buflen 1000ms;

        application live {
            live on;
            record off;
            
            # HLS settings
            hls on;
            hls_path /var/www/html/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_continuous on;
            hls_cleanup on;
            
            # Allow publishing from any IP
            allow publish all;
            allow play all;
            
            # Notify backend on stream events (with fallback)
            on_publish ${BACKEND_URL}/rtmp/publish;
            on_publish_done ${BACKEND_URL}/rtmp/publish_done;
            on_play ${BACKEND_URL}/rtmp/play;
            on_play_done ${BACKEND_URL}/rtmp/play_done;
            
            # Fallback if backend is not available
            on_publish_fallback ${BACKEND_URL}/rtmp/publish;
        }
    }
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer settings
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeout settings
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    
    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    

    upstream frontend {
        server frontend:3000;
    }

    upstream api {
        server api:9000;
    }

    # Main server on port 8080
    server {
        listen 8080;
        server_name localhost;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Frontend proxy
        location /app/ {
            proxy_pass ${FRONTEND_URL}/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Root redirect to frontend
        location = / {
            return 301 /app/;
        }

        # API proxy
        location /api/ {
            proxy_pass ${BACKEND_URL}/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket proxy
        location /socket.io/ {
            proxy_pass http://api:9000/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # HLS streaming with CORS
        location /hls/ {
            # Handle CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Range, Origin, X-Requested-With, Accept, Accept-Encoding, Accept-Language, Cache-Control, Pragma, Expires" always;
                add_header Access-Control-Allow-Credentials "false" always;
                add_header Access-Control-Max-Age "86400" always;
                add_header Content-Type "text/plain; charset=utf-8" always;
                add_header Content-Length 0 always;
                return 204;
            }
            
            proxy_pass http://api:9000/rtmp/hls/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Streaming optimizations
            proxy_buffering off;
            proxy_cache off;
            proxy_request_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Add CORS headers to all responses
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Range, Origin, X-Requested-With, Accept, Accept-Encoding, Accept-Language, Cache-Control, Pragma, Expires" always;
            add_header Access-Control-Allow-Credentials "false" always;
            add_header Access-Control-Max-Age "86400" always;
        }

        # RTMP statistics
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /usr/local/nginx/html;
        }
    }
}